//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Verse.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
public partial class VerseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, DOUBLEQUOTES=17, 
		TYPE=18, ASSIGN=19, EQUALS=20, CHOICE=21, FAIL=22, PLUS=23, MINUS=24, 
		ASTERISK=25, SLASH=26, GREATERTHAN=27, LESSTHAN=28, LAMBDA=29, INTEGER=30, 
		VARIABLE=31, NEWLINE=32, TAB=33, WS=34, COMMENT=35;
	public const int
		RULE_program = 0, RULE_e = 1, RULE_v = 2, RULE_hnf = 3, RULE_string = 4, 
		RULE_content = 5, RULE_tuple = 6, RULE_elements = 7, RULE_lambda = 8;
	public static readonly string[] ruleNames = {
		"program", "e", "v", "hnf", "string", "content", "tuple", "elements", 
		"lambda"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':'", "';'", "'..'", "'if'", "'):'", "'else:'", "'one'", 
		"'{'", "'}'", "'for'", "'do'", "'['", "']'", "','", "'\"'", "'any'", "':='", 
		"'='", "'|'", "'false?'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'=>'", 
		null, null, null, "'\\t'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "DOUBLEQUOTES", "TYPE", "ASSIGN", "EQUALS", 
		"CHOICE", "FAIL", "PLUS", "MINUS", "ASTERISK", "SLASH", "GREATERTHAN", 
		"LESSTHAN", "LAMBDA", "INTEGER", "VARIABLE", "NEWLINE", "TAB", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Verse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static VerseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VerseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VerseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			e(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EContext : ParserRuleContext {
		public EContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e; } }
	 
		public EContext() { }
		public virtual void CopyFrom(EContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		public IfElseExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FailExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(VerseParser.FAIL, 0); }
		public FailExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFailExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(VerseParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		public EqualityExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusOrMinusExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext[] v() {
			return GetRuleContexts<VContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v(int i) {
			return GetRuleContext<VContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(VerseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(VerseParser.MINUS, 0); }
		public PlusOrMinusExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOrMinusExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public ForExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(VerseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(VerseParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		public AssignmentExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForDoExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		public ForDoExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForDoExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultOrDivExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext[] v() {
			return GetRuleContexts<VContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v(int i) {
			return GetRuleContext<VContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(VerseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(VerseParser.SLASH, 0); }
		public MultOrDivExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOrDivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChoiceExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHOICE() { return GetToken(VerseParser.CHOICE, 0); }
		public ChoiceExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoiceExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OneExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public OneExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext[] v() {
			return GetRuleContexts<VContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v(int i) {
			return GetRuleContext<VContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(VerseParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(VerseParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public ComparisonExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BringIntoScopeExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(VerseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(VerseParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public BringIntoScopeExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBringIntoScopeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public ParenthesisExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueApplicationExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext[] v() {
			return GetRuleContexts<VContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v(int i) {
			return GetRuleContext<VContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public ValueApplicationExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueApplicationExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		public ValueExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeChoiceExpContext : EContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(VerseParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(VerseParser.INTEGER, i);
		}
		public RangeChoiceExpContext(EContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeChoiceExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EContext e() {
		return e(0);
	}

	private EContext e(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EContext _localctx = new EContext(Context, _parentState);
		EContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_e, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 21;
				Match(T__0);
				State = 22;
				e(0);
				State = 23;
				Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new BringIntoScopeExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25;
				Match(VARIABLE);
				State = 26;
				Match(T__2);
				State = 27;
				Match(TYPE);
				State = 28;
				Match(T__3);
				State = 29;
				e(15);
				}
				break;
			case 3:
				{
				_localctx = new AssignmentExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				Match(VARIABLE);
				State = 31;
				Match(ASSIGN);
				State = 32;
				e(0);
				State = 33;
				Match(T__3);
				State = 34;
				e(14);
				}
				break;
			case 4:
				{
				_localctx = new EqualityExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 36;
				v();
				State = 37;
				Match(EQUALS);
				State = 38;
				e(0);
				State = 39;
				Match(T__3);
				State = 40;
				e(13);
				}
				break;
			case 5:
				{
				_localctx = new MultOrDivExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42;
				v();
				State = 43;
				_la = TokenStream.LA(1);
				if ( !(_la==ASTERISK || _la==SLASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 44;
				v();
				}
				break;
			case 6:
				{
				_localctx = new PlusOrMinusExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 46;
				v();
				State = 47;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 48;
				v();
				}
				break;
			case 7:
				{
				_localctx = new ComparisonExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50;
				v();
				State = 51;
				_la = TokenStream.LA(1);
				if ( !(_la==GREATERTHAN || _la==LESSTHAN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 52;
				v();
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 53;
					Match(T__3);
					State = 54;
					e(0);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new ValueApplicationExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 57;
					v();
					State = 58;
					v();
					}
					break;
				case 2:
					{
					State = 60;
					v();
					State = 61;
					Match(T__0);
					State = 62;
					v();
					State = 63;
					Match(T__1);
					}
					break;
				}
				State = 69;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 67;
					Match(T__3);
					State = 68;
					e(0);
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new ValueExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 71;
				v();
				}
				break;
			case 10:
				{
				_localctx = new FailExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				Match(FAIL);
				}
				break;
			case 11:
				{
				_localctx = new RangeChoiceExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73;
				Match(INTEGER);
				State = 74;
				Match(T__4);
				State = 75;
				Match(INTEGER);
				}
				break;
			case 12:
				{
				_localctx = new IfElseExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				Match(T__5);
				State = 77;
				Match(T__0);
				State = 78;
				e(0);
				State = 79;
				Match(T__6);
				State = 80;
				e(0);
				State = 81;
				Match(T__7);
				State = 82;
				e(0);
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 83;
					Match(T__3);
					State = 84;
					e(0);
					}
					break;
				}
				}
				break;
			case 13:
				{
				_localctx = new OneExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87;
				Match(T__8);
				State = 88;
				Match(T__9);
				State = 89;
				e(0);
				State = 90;
				Match(T__10);
				}
				break;
			case 14:
				{
				_localctx = new ForExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92;
				Match(T__11);
				State = 93;
				Match(T__9);
				State = 94;
				e(0);
				State = 95;
				Match(T__10);
				}
				break;
			case 15:
				{
				_localctx = new ForDoExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97;
				Match(T__11);
				State = 98;
				Match(T__0);
				State = 99;
				e(0);
				State = 100;
				Match(T__1);
				State = 101;
				Match(T__12);
				State = 102;
				e(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChoiceExpContext(new EContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_e);
					State = 106;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 107;
					Match(CHOICE);
					State = 108;
					e(5);
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VContext : ParserRuleContext {
		public VContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v; } }
	 
		public VContext() { }
		public virtual void CopyFrom(VContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableValueContext : VContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(VerseParser.VARIABLE, 0); }
		public VariableValueContext(VContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HnfValueContext : VContext {
		[System.Diagnostics.DebuggerNonUserCode] public HnfContext hnf() {
			return GetRuleContext<HnfContext>(0);
		}
		public HnfValueContext(VContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHnfValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VContext v() {
		VContext _localctx = new VContext(Context, State);
		EnterRule(_localctx, 4, RULE_v);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				_localctx = new VariableValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				Match(VARIABLE);
				}
				break;
			case T__13:
			case DOUBLEQUOTES:
			case INTEGER:
				_localctx = new HnfValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				hnf();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HnfContext : ParserRuleContext {
		public HnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hnf; } }
	 
		public HnfContext() { }
		public virtual void CopyFrom(HnfContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringHnfContext : HnfContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringHnfContext(HnfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringHnf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaHnfContext : HnfContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		public LambdaHnfContext(HnfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaHnf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleHnfContext : HnfContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TupleHnfContext(HnfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleHnf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerHnfContext : HnfContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(VerseParser.INTEGER, 0); }
		public IntegerHnfContext(HnfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerHnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HnfContext hnf() {
		HnfContext _localctx = new HnfContext(Context, State);
		EnterRule(_localctx, 6, RULE_hnf);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new IntegerHnfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(INTEGER);
				}
				break;
			case 2:
				_localctx = new StringHnfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				@string();
				}
				break;
			case 3:
				_localctx = new TupleHnfContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				tuple();
				}
				break;
			case 4:
				_localctx = new LambdaHnfContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				lambda();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLEQUOTES() { return GetTokens(VerseParser.DOUBLEQUOTES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLEQUOTES(int i) {
			return GetToken(VerseParser.DOUBLEQUOTES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 8, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(DOUBLEQUOTES);
			State = 125;
			content();
			State = 126;
			Match(DOUBLEQUOTES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLEQUOTES() { return GetTokens(VerseParser.DOUBLEQUOTES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLEQUOTES(int i) {
			return GetToken(VerseParser.DOUBLEQUOTES, i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 10, RULE_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68719345662L) != 0)) {
				{
				{
				State = 128;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==DOUBLEQUOTES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 12, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__13);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3221372928L) != 0)) {
				{
				State = 135;
				elements();
				}
			}

			State = 138;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementsContext[] elements() {
			return GetRuleContexts<ElementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementsContext elements(int i) {
			return GetRuleContext<ElementsContext>(i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementsContext elements() {
		ElementsContext _localctx = new ElementsContext(Context, State);
		EnterRule(_localctx, 14, RULE_elements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			v();
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 141;
					Match(T__15);
					State = 142;
					elements();
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(VerseParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVerseVisitor<TResult> typedVisitor = visitor as IVerseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			tuple();
			State = 149;
			Match(LAMBDA);
			State = 150;
			e(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return e_sempred((EContext)_localctx, predIndex);
		}
		return true;
	}
	private bool e_sempred(EContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,153,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,3,1,56,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,66,
		8,1,1,1,1,1,3,1,70,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,3,1,86,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,105,8,1,1,1,1,1,1,1,5,1,110,8,1,10,1,12,1,113,9,1,
		1,2,1,2,3,2,117,8,2,1,3,1,3,1,3,1,3,3,3,123,8,3,1,4,1,4,1,4,1,4,1,5,5,
		5,130,8,5,10,5,12,5,133,9,5,1,6,1,6,3,6,137,8,6,1,6,1,6,1,7,1,7,1,7,5,
		7,144,8,7,10,7,12,7,147,9,7,1,8,1,8,1,8,1,8,1,8,0,1,2,9,0,2,4,6,8,10,12,
		14,16,0,4,1,0,25,26,1,0,23,24,1,0,27,28,1,0,17,17,169,0,18,1,0,0,0,2,104,
		1,0,0,0,4,116,1,0,0,0,6,122,1,0,0,0,8,124,1,0,0,0,10,131,1,0,0,0,12,134,
		1,0,0,0,14,140,1,0,0,0,16,148,1,0,0,0,18,19,3,2,1,0,19,1,1,0,0,0,20,21,
		6,1,-1,0,21,22,5,1,0,0,22,23,3,2,1,0,23,24,5,2,0,0,24,105,1,0,0,0,25,26,
		5,31,0,0,26,27,5,3,0,0,27,28,5,18,0,0,28,29,5,4,0,0,29,105,3,2,1,15,30,
		31,5,31,0,0,31,32,5,19,0,0,32,33,3,2,1,0,33,34,5,4,0,0,34,35,3,2,1,14,
		35,105,1,0,0,0,36,37,3,4,2,0,37,38,5,20,0,0,38,39,3,2,1,0,39,40,5,4,0,
		0,40,41,3,2,1,13,41,105,1,0,0,0,42,43,3,4,2,0,43,44,7,0,0,0,44,45,3,4,
		2,0,45,105,1,0,0,0,46,47,3,4,2,0,47,48,7,1,0,0,48,49,3,4,2,0,49,105,1,
		0,0,0,50,51,3,4,2,0,51,52,7,2,0,0,52,55,3,4,2,0,53,54,5,4,0,0,54,56,3,
		2,1,0,55,53,1,0,0,0,55,56,1,0,0,0,56,105,1,0,0,0,57,58,3,4,2,0,58,59,3,
		4,2,0,59,66,1,0,0,0,60,61,3,4,2,0,61,62,5,1,0,0,62,63,3,4,2,0,63,64,5,
		2,0,0,64,66,1,0,0,0,65,57,1,0,0,0,65,60,1,0,0,0,66,69,1,0,0,0,67,68,5,
		4,0,0,68,70,3,2,1,0,69,67,1,0,0,0,69,70,1,0,0,0,70,105,1,0,0,0,71,105,
		3,4,2,0,72,105,5,22,0,0,73,74,5,30,0,0,74,75,5,5,0,0,75,105,5,30,0,0,76,
		77,5,6,0,0,77,78,5,1,0,0,78,79,3,2,1,0,79,80,5,7,0,0,80,81,3,2,1,0,81,
		82,5,8,0,0,82,85,3,2,1,0,83,84,5,4,0,0,84,86,3,2,1,0,85,83,1,0,0,0,85,
		86,1,0,0,0,86,105,1,0,0,0,87,88,5,9,0,0,88,89,5,10,0,0,89,90,3,2,1,0,90,
		91,5,11,0,0,91,105,1,0,0,0,92,93,5,12,0,0,93,94,5,10,0,0,94,95,3,2,1,0,
		95,96,5,11,0,0,96,105,1,0,0,0,97,98,5,12,0,0,98,99,5,1,0,0,99,100,3,2,
		1,0,100,101,5,2,0,0,101,102,5,13,0,0,102,103,3,2,1,1,103,105,1,0,0,0,104,
		20,1,0,0,0,104,25,1,0,0,0,104,30,1,0,0,0,104,36,1,0,0,0,104,42,1,0,0,0,
		104,46,1,0,0,0,104,50,1,0,0,0,104,65,1,0,0,0,104,71,1,0,0,0,104,72,1,0,
		0,0,104,73,1,0,0,0,104,76,1,0,0,0,104,87,1,0,0,0,104,92,1,0,0,0,104,97,
		1,0,0,0,105,111,1,0,0,0,106,107,10,5,0,0,107,108,5,21,0,0,108,110,3,2,
		1,5,109,106,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,
		3,1,0,0,0,113,111,1,0,0,0,114,117,5,31,0,0,115,117,3,6,3,0,116,114,1,0,
		0,0,116,115,1,0,0,0,117,5,1,0,0,0,118,123,5,30,0,0,119,123,3,8,4,0,120,
		123,3,12,6,0,121,123,3,16,8,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,
		1,0,0,0,122,121,1,0,0,0,123,7,1,0,0,0,124,125,5,17,0,0,125,126,3,10,5,
		0,126,127,5,17,0,0,127,9,1,0,0,0,128,130,8,3,0,0,129,128,1,0,0,0,130,133,
		1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,11,1,0,0,0,133,131,1,0,0,0,
		134,136,5,14,0,0,135,137,3,14,7,0,136,135,1,0,0,0,136,137,1,0,0,0,137,
		138,1,0,0,0,138,139,5,15,0,0,139,13,1,0,0,0,140,145,3,4,2,0,141,142,5,
		16,0,0,142,144,3,14,7,0,143,141,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,
		0,145,146,1,0,0,0,146,15,1,0,0,0,147,145,1,0,0,0,148,149,3,12,6,0,149,
		150,5,29,0,0,150,151,3,2,1,0,151,17,1,0,0,0,11,55,65,69,85,104,111,116,
		122,131,136,145
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
