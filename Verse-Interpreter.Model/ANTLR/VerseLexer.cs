//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Verse.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
public partial class VerseLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, DOUBLEQUOTES=17, 
		TYPE=18, ASSIGN=19, EQUALS=20, CHOICE=21, FAIL=22, PLUS=23, MINUS=24, 
		ASTERISK=25, SLASH=26, GREATERTHAN=27, LESSTHAN=28, LAMBDA=29, INTEGER=30, 
		VARIABLE=31, NEWLINE=32, TAB=33, WS=34, COMMENT=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "NUMBER", 
		"LOWERCASE", "UPPERCASE", "DOUBLEQUOTES", "TYPE", "ASSIGN", "EQUALS", 
		"CHOICE", "FAIL", "PLUS", "MINUS", "ASTERISK", "SLASH", "GREATERTHAN", 
		"LESSTHAN", "LAMBDA", "INTEGER", "VARIABLE", "NEWLINE", "TAB", "WS", "COMMENT"
	};


	public VerseLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public VerseLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':'", "';'", "'..'", "'if'", "'):'", "'else:'", "'one'", 
		"'{'", "'}'", "'for'", "'do'", "'['", "']'", "','", "'\"'", "'any'", "':='", 
		"'='", "'|'", "'false?'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'=>'", 
		null, null, null, "'\\t'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "DOUBLEQUOTES", "TYPE", "ASSIGN", "EQUALS", 
		"CHOICE", "FAIL", "PLUS", "MINUS", "ASTERISK", "SLASH", "GREATERTHAN", 
		"LESSTHAN", "LAMBDA", "INTEGER", "VARIABLE", "NEWLINE", "TAB", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Verse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static VerseLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
		5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,
		1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
		1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
		1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,
		1,32,4,32,164,8,32,11,32,12,32,165,1,33,1,33,1,33,1,33,5,33,172,8,33,10,
		33,12,33,175,9,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,
		36,1,36,1,37,1,37,5,37,191,8,37,10,37,12,37,194,9,37,1,37,1,37,1,37,1,
		37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,0,35,0,37,0,39,17,41,18,43,19,45,20,47,21,49,22,
		51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,
		75,35,1,0,4,1,0,48,57,1,0,97,122,1,0,65,90,3,0,10,10,13,13,63,63,200,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,7,83,1,0,0,
		0,9,85,1,0,0,0,11,88,1,0,0,0,13,91,1,0,0,0,15,94,1,0,0,0,17,100,1,0,0,
		0,19,104,1,0,0,0,21,106,1,0,0,0,23,108,1,0,0,0,25,112,1,0,0,0,27,115,1,
		0,0,0,29,117,1,0,0,0,31,119,1,0,0,0,33,121,1,0,0,0,35,123,1,0,0,0,37,125,
		1,0,0,0,39,127,1,0,0,0,41,129,1,0,0,0,43,133,1,0,0,0,45,136,1,0,0,0,47,
		138,1,0,0,0,49,140,1,0,0,0,51,147,1,0,0,0,53,149,1,0,0,0,55,151,1,0,0,
		0,57,153,1,0,0,0,59,155,1,0,0,0,61,157,1,0,0,0,63,159,1,0,0,0,65,163,1,
		0,0,0,67,167,1,0,0,0,69,176,1,0,0,0,71,180,1,0,0,0,73,184,1,0,0,0,75,188,
		1,0,0,0,77,78,5,40,0,0,78,2,1,0,0,0,79,80,5,41,0,0,80,4,1,0,0,0,81,82,
		5,58,0,0,82,6,1,0,0,0,83,84,5,59,0,0,84,8,1,0,0,0,85,86,5,46,0,0,86,87,
		5,46,0,0,87,10,1,0,0,0,88,89,5,105,0,0,89,90,5,102,0,0,90,12,1,0,0,0,91,
		92,5,41,0,0,92,93,5,58,0,0,93,14,1,0,0,0,94,95,5,101,0,0,95,96,5,108,0,
		0,96,97,5,115,0,0,97,98,5,101,0,0,98,99,5,58,0,0,99,16,1,0,0,0,100,101,
		5,111,0,0,101,102,5,110,0,0,102,103,5,101,0,0,103,18,1,0,0,0,104,105,5,
		123,0,0,105,20,1,0,0,0,106,107,5,125,0,0,107,22,1,0,0,0,108,109,5,102,
		0,0,109,110,5,111,0,0,110,111,5,114,0,0,111,24,1,0,0,0,112,113,5,100,0,
		0,113,114,5,111,0,0,114,26,1,0,0,0,115,116,5,91,0,0,116,28,1,0,0,0,117,
		118,5,93,0,0,118,30,1,0,0,0,119,120,5,44,0,0,120,32,1,0,0,0,121,122,7,
		0,0,0,122,34,1,0,0,0,123,124,7,1,0,0,124,36,1,0,0,0,125,126,7,2,0,0,126,
		38,1,0,0,0,127,128,5,34,0,0,128,40,1,0,0,0,129,130,5,97,0,0,130,131,5,
		110,0,0,131,132,5,121,0,0,132,42,1,0,0,0,133,134,5,58,0,0,134,135,5,61,
		0,0,135,44,1,0,0,0,136,137,5,61,0,0,137,46,1,0,0,0,138,139,5,124,0,0,139,
		48,1,0,0,0,140,141,5,102,0,0,141,142,5,97,0,0,142,143,5,108,0,0,143,144,
		5,115,0,0,144,145,5,101,0,0,145,146,5,63,0,0,146,50,1,0,0,0,147,148,5,
		43,0,0,148,52,1,0,0,0,149,150,5,45,0,0,150,54,1,0,0,0,151,152,5,42,0,0,
		152,56,1,0,0,0,153,154,5,47,0,0,154,58,1,0,0,0,155,156,5,62,0,0,156,60,
		1,0,0,0,157,158,5,60,0,0,158,62,1,0,0,0,159,160,5,61,0,0,160,161,5,62,
		0,0,161,64,1,0,0,0,162,164,3,33,16,0,163,162,1,0,0,0,164,165,1,0,0,0,165,
		163,1,0,0,0,165,166,1,0,0,0,166,66,1,0,0,0,167,173,3,35,17,0,168,172,3,
		35,17,0,169,172,3,37,18,0,170,172,3,33,16,0,171,168,1,0,0,0,171,169,1,
		0,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,
		174,68,1,0,0,0,175,173,1,0,0,0,176,177,7,3,0,0,177,178,1,0,0,0,178,179,
		6,34,0,0,179,70,1,0,0,0,180,181,5,9,0,0,181,182,1,0,0,0,182,183,6,35,0,
		0,183,72,1,0,0,0,184,185,5,32,0,0,185,186,1,0,0,0,186,187,6,36,0,0,187,
		74,1,0,0,0,188,192,5,35,0,0,189,191,8,3,0,0,190,189,1,0,0,0,191,194,1,
		0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,
		195,196,7,3,0,0,196,197,1,0,0,0,197,198,6,37,0,0,198,76,1,0,0,0,5,0,165,
		171,173,192,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
